// Generated by CoffeeScript 1.9.3

/* Listen for message from the popup */

(function() {
  var Content, content;

  Content = (function() {
    function Content() {}

    Content.prototype.forceStop = false;

    Content.prototype.emit = function(to, method, params, callback) {
      console.log('>', to, method, params);
      return chrome.runtime.sendMessage({
        from: 'content',
        to: to,
        method: method,
        params: params
      }, callback);
    };

    Content.prototype.setMarks = function(params) {
      var $option, $select, currentValue, first, i, j, k, k2, k3, l, last, len, len1, len2, m, n, overwriteOld, ref, ref1, self, students, tab, tabK, v;
      self = this;
      students = params.students;
      overwriteOld = params.overwriteOld;
      first = 0;
      ref = $('ul li.tab-link');
      for (tabK = l = 0, len = ref.length; l < len; tabK = ++l) {
        tab = ref[tabK];
        $('a', tab)[0].click();
        last = first;
        for (k = m = 0, len1 = students.length; m < len1; k = ++m) {
          i = students[k];
          k2 = first;
          k3 = 0;
          while (k2 < i.labs.length) {
            j = i.labs[k2];
            while (true) {
              $select = $($($($('table')[tabK]).find('tr')[k + 2]).find('select')[k3]);
              if (!$select) {
                break;
              }
              if ($select.is(':disabled')) {
                k3++;
                continue;
              }
              break;
            }
            if (!$select.length) {
              break;
            }
            currentValue = $select.find('option:selected').val();
            if (overwriteOld || currentValue * 1 <= 0) {
              v = j;
              if (v * 1 === v) {
                $option = $select.find("option[value='" + v + "']");
              } else {
                $option = $select.find("option:contains('" + v + "')");
              }
              $option.prop('selected', true);
            }
            k2++;
            k3++;
            last = Math.max(last, k2);
          }
        }
        first = last;
      }
      ref1 = $('form');
      for (n = 0, len2 = ref1.length; n < len2; n++) {
        i = ref1[n];
        $.post($(i).attr('action'), $(i).serialize());
      }
    };

    return Content;

  })();

  content = new Content();

  console.log('init');

  chrome.runtime.onMessage.addListener(function(msg, sender, response) {
    if (msg.to === 'content') {
      console.log(msg.from, '>', msg.to, msg.method, msg.params);
      response(content[msg.method](msg.params));
    }
  });

}).call(this);

//# sourceMappingURL=content.js.map
