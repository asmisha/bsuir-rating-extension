// Generated by CoffeeScript 1.9.3
(function() {
  var routes;

  this.Extension = (function() {
    function Extension() {}

    Extension.emit = function(tabId, to, method, params, callback) {
      var data;
      console.log('>', to, method, params);
      data = {
        from: 'popup',
        to: to,
        method: method,
        params: params
      };
      if (to === 'content') {
        chrome.tabs.sendMessage(tabId, data, callback);
      } else {
        chrome.runtime.sendMessage(data, callback);
      }
    };

    Extension.waitTabLoaded = function(tabId, callback) {
      var h;
      h = setInterval((function() {
        return chrome.tabs.executeScript(tabId, {
          runAt: 'document_end',
          code: 'document.readyState;'
        }, function(data) {
          if (data && data[0] === 'complete') {
            clearInterval(h);
            setTimeout(callback, 1000);
          }
        });
      }), 500);
    };

    Extension.setMarks = function(tabId, students, callback) {
      Extension.emit(tabId, 'content', 'setMarks', {
        students: students
      }, callback);
    };

    return Extension;

  })();

  angular.module('ext', ['RDash']);

  angular.module('RDash', ['ui.bootstrap', 'ui.router', 'ngCookies']);

  angular.module('ext');

  routes = {
    index: {
      url: '/?tab',
      template: 'index.html',
      controller: 'index'
    }
  };

  angular.module('ext').config([
    '$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
      var addRoute, name, results;
      addRoute = function($stateProvider, p, n, r) {
        var nn, results, state;
        state = {
          url: r.url,
          controller: r.controller,
          reloadOnSearch: r.reloadOnSearch
        };
        if (r.template) {
          state.templateUrl = '/page/templates/' + r.template + '?' + (new Date().getTime() / 1000 | 0);
        }
        if (r.views) {
          state.views = r.views;
        }
        $stateProvider.state(p + n, state);
        if (r.routes) {
          results = [];
          for (nn in r.routes) {
            results.push(addRoute($stateProvider, p + n + '.', nn, r.routes[nn]));
          }
          return results;
        }
      };
      $urlRouterProvider.otherwise('/');
      results = [];
      for (name in routes) {
        results.push(addRoute($stateProvider, '', name, routes[name]));
      }
      return results;
    }
  ]).filter('join', function() {
    return function(x, y) {
      return x.join(y);
    };
  }).controller('index', [
    '$scope', '$stateParams', function($scope, $stateParams) {
      $scope.labs = {
        minCnt: 3,
        cnt: 8
      };
      $scope.$watch((function() {
        return JSON.stringify($scope.labs);
      }), function() {
        var al, i, j, k, len, len1, len2, m, maxL, minL, o, q, ref, s, sl, students;
        if (!$scope.labs.text) {
          return;
        }
        students = $scope.labs.text.split("\n");
        sl = 0;
        students = students.map(function(p) {
          var cur, i, info, j, k, l, labs, len, len1, len2, m, name, o, ref, s;
          labs = [];
          info = p.split(',');
          name = info[0];
          info[0] = '';
          for (m = 0, len = info.length; m < len; m++) {
            i = info[m];
            cur = 0;
            ref = i.split(/[^\d]/).join('');
            for (o = 0, len1 = ref.length; o < len1; o++) {
              j = ref[o];
              for (s = 0, len2 = j.length; s < len2; s++) {
                k = j[s];
                k *= 1;
                if (cur) {
                  labs.push(cur * 10 + k);
                  cur = 0;
                } else {
                  if (labs.indexOf(k) === -1) {
                    labs.push(k);
                  } else {
                    if (k * 10 <= $scope.labs.cnt) {
                      cur = k;
                    }
                  }
                }
              }
            }
          }
          if ($scope.labs.minCnt) {
            while (labs.length < $scope.labs.minCnt) {
              labs.push('нб');
            }
          }
          if ($scope.labs.cnt) {
            while (labs.length < $scope.labs.cnt) {
              labs.push('нз');
            }
          }
          l = info.join('').length;
          sl += l;
          return {
            name: name,
            labs: labs,
            l: l
          };
        });
        al = sl / students.length;
        minL = 1e9;
        maxL = -1e9;
        for (m = 0, len = students.length; m < len; m++) {
          i = students[m];
          i.l = (i.l - al) / al;
          minL = Math.min(minL, i.l);
          maxL = Math.max(maxL, i.l);
        }
        q = 0.7;
        for (o = 0, len1 = students.length; o < len1; o++) {
          i = students[o];
          i.l = (i.l - minL) / (maxL - minL);
          ref = i.labs;
          for (k = s = 0, len2 = ref.length; s < len2; k = ++s) {
            j = ref[k];
            if (j * 1 === j) {
              i.labs[k] = 5 + Math.round(5 * (q - Math.random() * (1 - i.l) * q));
            }
          }
          i.l = Math.round(i.l * 100) / 100;
        }
        return $scope.students = students;
      });
      $scope.go = function() {
        return Extension.setMarks($stateParams.tab * 1, $scope.students);
      };
    }
  ]).controller('init', ['$scope', '$cookieStore', '$stateParams', function($scope, $cookieStore, $stateParams) {}]);

}).call(this);

//# sourceMappingURL=module.js.map
